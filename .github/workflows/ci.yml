# AsyncNet CI/CD Pipeline

name: AsyncNet CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ${{ matrix.runner }}
    # Increased timeout to 45 minutes to accommodate large matrix runs with multiple
    # runners, targets, Xcode versions, and Swift versions. This reduces CI failures
    # when runners queue or tests run slowly due to system load or network conditions.
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-latest, macos-13, macos-14]
        target: [macos, ios, tvos]
        xcode: [15, 16]
        swift: [5.10.1, 6.0.1]
        build: [spm, xcode]
        # Exclude incompatible combinations
        exclude:
          - target: ios
            build: spm
          - target: tvos
            build: spm
          # macos-13 doesn't support Xcode 16
          - runner: macos-13
            xcode: 16
          # macos-14 with Xcode 16 may have compatibility issues, use Xcode 15
          - runner: macos-14
            xcode: 16
          # macos-latest should always use Xcode 16
          - runner: macos-latest
            xcode: 15
          # Swift version compatibility exclusions
          - xcode: 15
            swift: 6.0.1
          - xcode: 16
            swift: 5.10.1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache SPM
        if: matrix.target == 'macos' && matrix.build == 'spm'
        uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ matrix.swift }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ matrix.swift }}-

      - name: Cache Xcode DerivedData
        if: matrix.build == 'xcode'
        uses: actions/cache@v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode-${{ matrix.xcode }}-swift-${{ matrix.swift }}-deriveddata-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-xcode-${{ matrix.xcode }}-swift-${{ matrix.swift }}-deriveddata-

      - name: Set up Swift (macOS SPM)
        if: runner.os == 'macOS' && matrix.target == 'macos' && matrix.build == 'spm'
        uses: swift-actions/setup-swift@v1
        with:
          swift-version: ${{ matrix.swift }}
      - name: Set up Xcode (macOS/iOS/tvOS)
        if: runner.os == 'macOS' && matrix.build == 'xcode'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Build (macOS SPM)
        if: matrix.target == 'macos' && matrix.build == 'spm'
        run: |
          if [[ "${{ matrix.swift }}" == 6.* ]]; then
            swift build -Xswiftc -strict-concurrency=complete
          else
            swift build
          fi
      - name: Build (macOS Xcode)
        if: matrix.target == 'macos' && matrix.build == 'xcode'
        run: xcodebuild -scheme AsyncNet -destination "platform=macOS" CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO build

      - name: Find iOS Simulator
        if: matrix.target == 'ios'
        id: find_ios_simulator
        run: |
          # Parse simctl list --json to find an available iPhone device
          SIMULATOR=""
          
          # Get JSON output and parse for available iPhone devices
          JSON_OUTPUT=$(xcrun simctl list --json devices available)
          
          # Extract device names that are iPhones and available
          SIMULATOR=$(echo "$JSON_OUTPUT" | jq -r '
            .devices | 
            to_entries[] | 
            select(.key | contains("iOS")) | 
            .value[] | 
            select(.name | contains("iPhone")) | 
            select(.isAvailable == true) | 
            select(.state == "Shutdown" or .state == "Booted") | 
            .name' | head -1)
          
          # Fallback to iPhone 14 if no valid device found
          if [ -z "$SIMULATOR" ]; then
            SIMULATOR="iPhone 14"
          fi
          
          echo "ios_simulator=$SIMULATOR" >> "$GITHUB_OUTPUT"
          echo "Found iOS Simulator: $SIMULATOR"

      - name: Build (iOS)
        if: matrix.target == 'ios'
        run: xcodebuild -scheme AsyncNet -destination "platform=iOS Simulator,name=${{ steps.find_ios_simulator.outputs.ios_simulator }},OS=latest" -sdk iphonesimulator CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO build

      - name: Find tvOS Simulator
        if: matrix.target == 'tvos'
        id: find_tvos_simulator
        run: |
          # Parse simctl list --json to find an available Apple TV device
          SIMULATOR=""
          
          # Get JSON output and parse for available Apple TV devices
          JSON_OUTPUT=$(xcrun simctl list --json devices available)
          
          # Extract device names that are Apple TVs and available
          SIMULATOR=$(echo "$JSON_OUTPUT" | jq -r '
            .devices | 
            to_entries[] | 
            select(.key | contains("tvOS")) | 
            .value[] | 
            select(.name | contains("Apple TV")) | 
            select(.isAvailable == true) | 
            select(.state == "Shutdown" or .state == "Booted") | 
            .name' | head -1)
          
          # Fallback to Apple TV 4K if no valid device found
          if [ -z "$SIMULATOR" ]; then
            SIMULATOR="Apple TV 4K"
          fi
          
          echo "tvos_simulator=$SIMULATOR" >> "$GITHUB_OUTPUT"
          echo "Found tvOS Simulator: $SIMULATOR"

      - name: Verify iOS Simulators
        if: matrix.target == 'ios'
        run: |
          echo "Available iOS Simulators:"
          xcrun simctl list devices available | grep -A 5 -B 5 "iOS" || true
          echo "Using simulator: ${{ steps.find_ios_simulator.outputs.ios_simulator }}"

      - name: Test macOS SPM
        if: matrix.target == 'macos' && matrix.build == 'spm'
        run: swift test --enable-code-coverage

      - name: Test macOS Xcode
        if: matrix.target == 'macos' && matrix.build == 'xcode'
        run: xcodebuild test -scheme AsyncNet -destination "platform=macOS" CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO

      - name: Test iOS
        if: matrix.target == 'ios'
        run: xcodebuild test -scheme AsyncNet -destination "platform=iOS Simulator,name=${{ steps.find_ios_simulator.outputs.ios_simulator }},OS=latest" -sdk iphonesimulator CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO

      - name: Verify tvOS Simulators
        if: matrix.target == 'tvos'
        run: |
          echo "Available tvOS Simulators:"
          xcrun simctl list devices available | grep -A 5 -B 5 "tvOS" || true
          echo "Using simulator: ${{ steps.find_tvos_simulator.outputs.tvos_simulator }}"

      - name: Test tvOS
        if: matrix.target == 'tvos'
        run: xcodebuild test -scheme AsyncNet -destination "platform=tvOS Simulator,name=${{ steps.find_tvos_simulator.outputs.tvos_simulator }},OS=latest" -sdk appletvsimulator CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO

      - name: Check coverage profdata
        if: matrix.target == 'macos' && matrix.build == 'spm'
        id: coverage_profdata_check
        run: |
          # Find the first .profdata file in the workspace
          PROFDATA_PATH=$(find . -name "*.profdata" -type f | head -1)
          
          if [ -n "$PROFDATA_PATH" ] && [ -f "$PROFDATA_PATH" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "profdata_path=$PROFDATA_PATH" >> "$GITHUB_OUTPUT"
            echo "Found profdata at: $PROFDATA_PATH"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "No profdata files found"
          fi

      - name: Upload coverage profdata
        if: matrix.target == 'macos' && matrix.build == 'spm' && steps.coverage_profdata_check.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-profdata-${{ matrix.runner }}-${{ matrix.target }}-${{ matrix.build }}-xcode${{ matrix.xcode }}-swift${{ matrix.swift }}
          path: ${{ steps.coverage_profdata_check.outputs.profdata_path }}

# Note: iPadOS builds are not included in the current matrix for simplicity
# To add iPadOS support, add 'ipados' to the target axis and update the test script accordingly
