# AsyncNet CI/CD Pipeline

name: AsyncNet CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Minimal permissions following principle of least privilege
# 
# actions: read (not write) is CORRECT because:
# - This workflow only uses standard GitHub Actions (checkout, cache, upload-artifact)
# - It does NOT call the GitHub Actions API directly
# - Concurrency cancellation (cancel-in-progress: true) is handled by GitHub's infrastructure
# - No programmatic workflow management or API calls are performed
#
# actions: write would only be needed if the workflow:
# - Used actions/github-script to call GitHub APIs
# - Programmatically canceled other workflow runs
# - Managed workflow approvals or other Actions API operations
#
# Using read permissions reduces security blast radius while maintaining full functionality.
permissions:
  contents: read
  actions: read

# Prevent duplicate workflow runs and cancel in-progress jobs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    runs-on: ${{ matrix.runner }}
    # Increased timeout to 45 minutes to accommodate large matrix runs with multiple
    # runners, targets, Xcode versions, and Swift versions. This reduces CI failures
    # when runners queue or tests run slowly due to system load or network conditions.
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        runner: [macos-15, macos-latest]
        target: [macos, ios, tvos]
        xcode: [16]
        swift: [6.0.3]  # Matches Xcode 16's bundled Swift toolchain to prevent version mismatches
        build: [spm, xcode]
        # Exclude incompatible combinations
        exclude:
          - target: ios
            build: spm
          - target: tvos
            build: spm
          # macOS 14 doesn't support Xcode 16 on hosted runners
          - runner: macos-14
            xcode: 16

    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4

      - name: Cache SPM
        if: matrix.target == 'macos' && matrix.build == 'spm'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ matrix.swift }}-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ matrix.swift }}-

      - name: Cache Xcode DerivedData
        if: matrix.build == 'xcode'
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ~/Library/Developer/Xcode/DerivedData
          key: ${{ runner.os }}-xcode${{ matrix.xcode }}-swift-${{ matrix.swift }}-deriveddata-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-xcode${{ matrix.xcode }}-swift-${{ matrix.swift }}-deriveddata-

      - name: Set up Swift (macOS SPM)
        if: runner.os == 'macOS' && matrix.target == 'macos' && matrix.build == 'spm'
        uses: swift-actions/setup-swift@682457186b71c25a884c45c06f859febbe259240 # v2.3.0
        with:
          swift-version: ${{ matrix.swift }}

      - name: Set up Xcode (macOS/iOS/tvOS)
        if: runner.os == 'macOS' && matrix.build == 'xcode'
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1
        with:
          xcode-version: ${{ matrix.xcode }}

      - name: Validate Xcode availability
        if: runner.os == 'macOS' && matrix.build == 'xcode'
        run: |
          #!/bin/bash
          # Validate selected Xcode is available on the runner
          if ! xcodebuild -version; then
            echo "ERROR: xcodebuild -version failed. The selected Xcode version may not be available on this runner."
            exit 1
          fi

      - name: Build (macOS SPM)
        if: matrix.target == 'macos' && matrix.build == 'spm'
        run: |
          swift build --configuration Debug \
            -Xswiftc -Xfrontend -Xswiftc -strict-concurrency=complete \
            -Xswiftc -Xfrontend -Xswiftc -warn-concurrency \
            -Xswiftc -Xfrontend -Xswiftc -enable-actor-data-race-checks

      - name: Build (macOS Xcode)
        if: matrix.target == 'macos' && matrix.build == 'xcode'
        run: xcodebuild -scheme AsyncNet -destination "platform=macOS" CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO build

      - name: Find iOS Simulator
        if: matrix.target == 'ios'
        id: find_ios_simulator
        run: |
          #!/bin/bash
          set -euo pipefail

          # Call the shared simulator discovery script
          ./scripts/ci/find_simulator.sh "iOS" "iPhone" "iPhone 14" "ios"

      - name: Build (iOS)
        if: matrix.target == 'ios'
        run: |
          if [ -n "${{ steps.find_ios_simulator.outputs.ios_simulator_udid }}" ]; then
            DEST="id=${{ steps.find_ios_simulator.outputs.ios_simulator_udid }}"
          else
            DEST="platform=iOS Simulator,name=${{ steps.find_ios_simulator.outputs.ios_simulator_name }}"
          fi
          xcodebuild -scheme AsyncNet -destination "$DEST" -sdk iphonesimulator CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO build

      - name: Find tvOS Simulator
        if: matrix.target == 'tvos'
        id: find_tvos_simulator
        run: |
          #!/bin/bash
          set -euo pipefail

          # Call the shared simulator discovery script
          ./scripts/ci/find_simulator.sh "tvOS" "Apple TV" "Apple TV 4K" "tvos"

      - name: Verify iOS Simulators
        if: matrix.target == 'ios'
        run: |
          echo "Available iOS Simulators:"
          xcrun simctl list devices available | grep -A 5 -B 5 "iOS" || true
          echo "Using simulator: ${{ steps.find_ios_simulator.outputs.ios_simulator_name }}"

      - name: Verify tvOS Simulators
        if: matrix.target == 'tvos'
        run: |
          echo "Available tvOS Simulators:"
          xcrun simctl list devices available | grep -A 5 -B 5 "tvOS" || true
          echo "Using simulator: ${{ steps.find_tvos_simulator.outputs.tvos_simulator_name }}"

      - name: Test macOS SPM
        if: matrix.target == 'macos' && matrix.build == 'spm'
        run: |
          swift test --configuration Debug \
            -Xswiftc -Xfrontend -Xswiftc -strict-concurrency=complete \
            -Xswiftc -Xfrontend -Xswiftc -warn-concurrency \
            -Xswiftc -Xfrontend -Xswiftc -enable-actor-data-race-checks \
            --enable-code-coverage

      - name: Test macOS Xcode
        if: matrix.target == 'macos' && matrix.build == 'xcode'
        run: xcodebuild test -scheme AsyncNet -destination "platform=macOS" CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO

      - name: Test iOS
        if: matrix.target == 'ios'
        run: |
          if [ -n "${{ steps.find_ios_simulator.outputs.ios_simulator_udid }}" ]; then
            DEST="id=${{ steps.find_ios_simulator.outputs.ios_simulator_udid }}"
          else
            DEST="platform=iOS Simulator,name=${{ steps.find_ios_simulator.outputs.ios_simulator_name }}"
          fi
          xcodebuild test -scheme AsyncNet -destination "$DEST" -destination-timeout 180 -sdk iphonesimulator CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO

      - name: Test tvOS
        if: matrix.target == 'tvos'
        run: |
          if [ -n "${{ steps.find_tvos_simulator.outputs.tvos_simulator_udid }}" ]; then
            DEST="id=${{ steps.find_tvos_simulator.outputs.tvos_simulator_udid }}"
          else
            DEST="platform=tvOS Simulator,name=${{ steps.find_tvos_simulator.outputs.tvos_simulator_name }}"
          fi
          xcodebuild test -scheme AsyncNet -destination "$DEST" -destination-timeout 180 -sdk appletvsimulator CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO

      - name: Check coverage profdata
        if: matrix.target == 'macos' && matrix.build == 'spm'
        id: coverage_profdata_check
        run: |
          # Find the first .profdata file in the workspace
          PROFDATA_PATH=$(find . -name "*.profdata" -type f | head -1)
          
          if [ -n "$PROFDATA_PATH" ] && [ -f "$PROFDATA_PATH" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
            echo "profdata_path=$PROFDATA_PATH" >> "$GITHUB_OUTPUT"
            echo "Found profdata at: $PROFDATA_PATH"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
            echo "No profdata files found"
          fi

      - name: Upload coverage profdata
        if: matrix.target == 'macos' && matrix.build == 'spm' && steps.coverage_profdata_check.outputs.exists == 'true'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: coverage-profdata-${{ matrix.runner }}-${{ matrix.target }}-${{ matrix.build }}-xcode${{ matrix.xcode }}-swift${{ matrix.swift }}
          path: ${{ steps.coverage_profdata_check.outputs.profdata_path }}

# Note: iPadOS builds are not included because iPadOS and iOS have been unified
# Starting with iOS 18/iPadOS 18 (September 2024), Apple merged the platforms:
# - iPadOS SDK was discontinued
# - iPads now run iOS natively
# - Single iOS build covers both iPhone and iPad devices
# - No separate iPadOS target is needed in the matrix
